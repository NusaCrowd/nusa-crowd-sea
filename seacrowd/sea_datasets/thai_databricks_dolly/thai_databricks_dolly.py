from pathlib import Path
from typing import Dict, List, Tuple

import datasets
import pandas as pd
from datasets.download.download_manager import DownloadManager

from seacrowd.utils import schemas
from seacrowd.utils.configs import SEACrowdConfig
from seacrowd.utils.constants import Licenses, Tasks

# No paper citation found.
_CITATION = ""

_LOCAL = False
_LANGUAGES = ["tha"]
_DATASETNAME = "thai_databricks_dolly"
_DESCRIPTION = """\
This is a Thai-instructed dataset translated from databricks-dolly-15k using
Google Cloud Translation. databricks-dolly-15k is an open-source dataset of
instruction-following records generated by thousands of Databricks employees in
several behavioral categories outlined in the InstructGPT paper, including
brainstorming, classification, closed QA, generation, information extraction,
open QA, and summarization.
"""

_HOMEPAGE = "https://huggingface.co/datasets/Thaweewat/databricks-dolly-15k-th"
_LICENSE = Licenses.CC_BY_SA_3_0.value
_URL = "https://huggingface.co/datasets/Thaweewat/databricks-dolly-15k-th/resolve/main/databricks-dolly-15k-th.parquet"
_SUPPORTED_TASKS = [Tasks.QUESTION_ANSWERING]
_SOURCE_VERSION = "1.0.0"
_SEACROWD_VERSION = "1.0.0"


class ThaiDatabricksDollyDataset(datasets.GeneratorBasedBuilder):
    """Thai Databricks Dolly Dataset"""

    SOURCE_VERSION = datasets.Version(_SOURCE_VERSION)
    SEACROWD_VERSION = datasets.Version(_SEACROWD_VERSION)

    SEACROWD_SCHEMA_NAME = "qa"

    BUILDER_CONFIGS = [
        SEACrowdConfig(name=f"{_DATASETNAME}_source", version=SOURCE_VERSION, description=f"{_DATASETNAME} source schema", schema="source", subset_id=_DATASETNAME),
        SEACrowdConfig(
            name=f"{_DATASETNAME}_seacrowd_{SEACROWD_SCHEMA_NAME}",
            version=SEACROWD_VERSION,
            description=f"{_DATASETNAME} SEACrowd schema",
            schema=f"seacrowd_{SEACROWD_SCHEMA_NAME}",
            subset_id=_DATASETNAME,
        ),
    ]

    DEFAULT_CONFIG_NAME = f"{_DATASETNAME}_source"

    def _info(self) -> datasets.DatasetInfo:
        if self.config.schema == "source":
            features = datasets.Features(
                {
                    "instruction": datasets.Value("string"),
                    "context": datasets.Value("string"),
                    "response": datasets.Value("string"),
                    "category": datasets.Value("string"),
                }
            )
        elif self.config.schema == f"seacrowd_{self.SEACROWD_SCHEMA_NAME}":
            features = schemas.qa.features
            features["meta"] = {
                "category": datasets.Value("string"),
                "response": datasets.Value("string"),
            }
        return datasets.DatasetInfo(
            description=_DESCRIPTION,
            features=features,
            homepage=_HOMEPAGE,
            license=_LICENSE,
            citation=_CITATION,
        )

    def _split_generators(self, dl_manager: DownloadManager) -> List[datasets.SplitGenerator]:
        """Returns SplitGenerators."""
        data_file = Path(dl_manager.download_and_extract(_URL))
        return [datasets.SplitGenerator(name=datasets.Split.TRAIN, gen_kwargs={"filepath": data_file})]

    def _generate_examples(self, filepath: Path):
        """Yield examples as (key, example) tuples"""
        df = pd.read_parquet(filepath)
        for idx, row in df.iterrows():
            if self.config.schema == "source":
                example = {"instruction": row.get("instruction"), "context": row.get("context"), "response": row.get("response"), "category": row.get("category")}
            elif self.config.schema == f"seacrowd_{self.SEACROWD_SCHEMA_NAME}":
                example = {
                    "id": str(idx),
                    "question_id": None,
                    "document_id": None,
                    "question": row.get("instruction"),
                    "type": None,
                    "choices": [],
                    "context": row.get("context"),
                    "answer": [],
                    "meta": {
                        "category": row.get("category"),
                        "response": row.get("response"),
                    },
                }

            yield idx, example
